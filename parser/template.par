### RITHM Parser Template --------------------------------------------------------
# This is a basic template file that is used to parse raw JSON data
# into tabulated files that you can work with more easily. You can save 
# multiple versions of these files (e.g., one for each project). This
# will make it easier to re-trace your steps later. All files should 
# include the *.par extension (project1.par, project2.par, etc.). 


### Directories:
# DIR_IN should be set to where your JSON data files are located.
# DIR_OUT should be set to where your tabulated files will be saved.
# You should manually create these directories before running the process;
# Use forward-slashes # (i.e., "/") and NOT backslashes (i.e., "\").
# Always include a slash at the end of the directory (or else it will be 
# treated as part of the file name, which will result in bad behavior).
###
DIR_IN: ../streamer_raw/
DIR_OUT: ../parser_out/folder_you_made/subfolder/


### Start & End dates:
# This narrows the date range that you are searching within. For example, 
# if you only want to look at a subset of all data that have been streamed.
# End date is inclusive. Date format is required to be: YYYYMMDD
# You can under-run or over-run the dates (e.g., 20180000, 20189999).
###
START: 20180000
END:   20189999


### Mode:
#  This controls text and tabulation output.
#  1 = Tab-separated value (TSV) output with minimal format changes. (default)
#  Refer to parselogic.py documentation for additional options.
###
MODE: 1


### Lowercase:
#  This controls text output and takes precedence over MODE formatting.
#  If set to "true", this will lowercase tweet text output.
###
LCASE: false


### Emoji:
# Emoji are delivered in Unicode format, which is not human-readable.
# Select an "emojilist" file to translate emoji to human-readable text.
# Leave this parameter blank if you prefer raw Unicode representations.
###
EMOJI: emojilist5.csv


### Test:
#  This will print out descriptive data related to processing each JSON file.
#  Prints to the terminal or batch file output (e.g., SLURM).
###
TEST: true


### Performance optimization:
# Value set to "high" will load entire JSON data files into RAM for processing.
# This results in faster processing but large files may over-run RAM and crash.
# Set this to "low" if large data files are causing the process to crash.
# In the event that a file fails to read in "high", it will try again in "low".
# This may also happen if a file is malformed (e.g., JSON terminates abruptly).
###
MEMORY: high


### Keywords:
# !!! IMPORTANT: THIS MUST BE THE FINAL ENTRY IN THE TEMPLATE FILE !!!
# Each keyword or logic function is a separate line AFTER "KEYWORDS:" command.
# It is generally best to use identical keywords to those that you used
# to stream the data, unless you have a good reason to exclude some.
# Each separate line essentially functions as an OR operator.
#
# Boolean searches may be used, but are not recommended in most use cases:
# " & " = AND. " | " = OR. "!" = NOT must be prefixed directly on the keyword.
# Parentheses not supported: combine " & " and " | " operators at your own risk!
# "*" works mostly as expected as a prefix or suffix for keyword stubs. It does 
# not work within keywords. "***" retrieves ALL available data from JSON files.
###
KEYWORDS:
enter
your
keywords
here
